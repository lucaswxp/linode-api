// Generated by CoffeeScript 2.0.2
(function() {
  //!/usr/bin/env coffee

  // Scrapes the Linode API documentation pages to extract methods
  // and associated parameters.
  var api, api_hrefs, dump_api, get_api_groups, get_methods_for_group, get_parameters_for_method, reqs, request;

  request = require('request');

  api_hrefs = /<a href=["'](\/api\/[^"']+)["']>/g;

  get_api_groups = function() {
    var groups, uri;
    groups = {};
    uri = 'http://www.linode.com/api/';
    console.log(`GET ${uri}`);
    return request({uri}, function(_, _2, body) {
      var match, name, path, results;
      while (match = api_hrefs.exec(body)) {
        path = match[1];
        name = path.replace(/\/api\/(.+)/, '$1');
        uri = `http://linode.com${path}`;
        groups[name] = uri;
      }
      results = [];
      for (name in groups) {
        uri = groups[name];
        results.push(get_methods_for_group(name, uri));
      }
      return results;
    });
  };

  get_methods_for_group = function(name, uri) {
    var methods;
    methods = {};
    console.log(`GET ${uri}`);
    return request({uri}, function(_, _2, body) {
      var match, path, results;
      while (match = api_hrefs.exec(body)) {
        path = match[1];
        uri = `http://linode.com${path}`;
        name = decodeURIComponent(path).split('/').pop();
        methods[name] = uri;
      }
      results = [];
      for (name in methods) {
        uri = methods[name];
        results.push(get_parameters_for_method(name, uri));
      }
      return results;
    });
  };

  api = {};

  reqs = 0;

  get_parameters_for_method = function(name, uri) {
    var props;
    props = /<span class="propName">([^<]+)<\/span>.+?\((required|optional)\)/g;
    ++reqs;
    console.log(`GET ${uri}`);
    return request({uri}, function(_, _2, body) {
      var match, param, required;
      reqs--;
      body = body.replace(/\n/g, '');
      while (match = props.exec(body)) {
        param = match[1];
        required = match[2] === 'required';
        if (api[name] == null) {
          api[name] = [];
        }
        api[name].push({param, required});
      }
      console.log(`${reqs} requests outstanding ...`);
      if (reqs === 0) {
        return dump_api();
      }
    });
  };

  dump_api = function() {
    var fs, path;
    fs = require('fs');
    path = __dirname + '/../data/api.json';
    fs.writeFileSync(path, JSON.stringify(api));
    return console.log(`wrote ${path}`);
  };

  get_api_groups();

}).call(this);
